// backend/server.js
// Complete Local Business Audit Tool API with all 8 services integrated
// FIXED VERSION - Context binding and data flow issues resolved

const express = require("express");
const cors = require("cors");
const { analyzeWebsite } = require("./services/websiteService");
const { analyzeCompetitors } = require("./services/competitorService");
const { analyzeKeywords } = require("./services/keywordService");
const { analyzeCitations } = require("./services/citationService");
const { analyzePageSpeed } = require("./services/pagespeedService");
const { analyzeSchema } = require("./services/schemaService");
const { analyzeReviews } = require("./services/reviewService");
// üîß FIX 1: Import the class instance, not destructured method
const auditProcessor = require("./services/auditProcessor");

const app = express();
const PORT = 3001;

app.use(
  cors({
    origin: true,
    credentials: true,
  }),
);

app.use(express.json());

// üîß FIX 2: Add the missing health endpoint that troubleshooter expects
app.get("/api/health", (req, res) => {
  res.json({ 
    status: "healthy", 
    timestamp: new Date().toISOString(),
    services: "all systems operational"
  });
});

app.get("/health", (req, res) => {
  res.json({ status: "OK" });
});

app.post("/api/audit", async (req, res) => {
  try {
    console.log(
      "üìù Comprehensive audit request received:",
      req.body.businessName,
    );

    const startTime = Date.now();

    // üîß FIX 3: Ensure proper location data mapping
    const businessData = {
      ...req.body,
      // Ensure location fields are properly mapped
      city: req.body.city || '',
      state: req.body.state || '',
      // Create combined location for backward compatibility
      location: req.body.city && req.body.state 
        ? `${req.body.city}, ${req.body.state}` 
        : req.body.location || ''
    };

    console.log("üìç Business location data:", {
      city: businessData.city,
      state: businessData.state,
      location: businessData.location
    });

    // üîê API Credentials - Using Codespaces Secrets (NO fallback keys for security)
    const apiCredentials = {
      // DataForSEO handles Maps/Citations/Competitors/Reviews
      username: process.env.DATAFORSEO_USER,
      password: process.env.DATAFORSEO_PASS,
      
      // OpenAI for keyword analysis
      openaiApiKey: process.env.OPENAI_API_KEY,
      
      // Google PageSpeed for performance analysis
      googleApiKey: process.env.GOOGLE_PAGESPEED_API_KEY,
      
      // Google Sheets for storing results (optional)
      googleSheetsApiKey: process.env.GOOGLE_SHEETS_API_KEY
    };

    // üîë Debug: Check API keys status (remove in production)
    console.log('üîë API Keys Status:');
    console.log('DataForSEO User:', apiCredentials.username ? '‚úÖ SET' : '‚ùå MISSING');
    console.log('DataForSEO Pass:', apiCredentials.password ? '‚úÖ SET' : '‚ùå MISSING');
    console.log('OpenAI:', apiCredentials.openaiApiKey ? '‚úÖ SET' : '‚ùå MISSING');
    console.log('Google PageSpeed:', apiCredentials.googleApiKey ? '‚úÖ SET' : '‚ùå MISSING');
    console.log('Google Sheets:', apiCredentials.googleSheetsApiKey ? '‚úÖ SET' : '‚ùå MISSING');

    // üß™ Debug - Check what credentials are actually being passed to services
    console.log('üß™ Debug - Credentials being passed to services:');
    console.log('DataForSEO username exists:', !!apiCredentials.username);
    console.log('DataForSEO password exists:', !!apiCredentials.password);
    console.log('OpenAI key exists:', !!apiCredentials.openaiApiKey);
    console.log('Google PageSpeed key exists:', !!apiCredentials.googleApiKey);

    // STEP 1: Website Content Analysis
    console.log("üåê Step 1: Starting website analysis...");
    const websiteResults = await analyzeWebsite(businessData);
    console.log("‚úÖ Website analysis complete");

    // STEP 2: Competitor Analysis
    console.log("üèÜ Step 2: Starting competitor analysis...");
    const competitorResults = await analyzeCompetitors(
      businessData,
      apiCredentials,
    );
    console.log("‚úÖ Competitor analysis complete");

    // STEP 3: Keyword Analysis
    console.log("üîç Step 3: Starting keyword analysis...");
    const keywordResults = await analyzeKeywords(
      websiteResults,
      competitorResults,
      apiCredentials,
    );
    console.log("‚úÖ Keyword analysis complete");

    // STEP 4: Citation Analysis
    console.log("üìä Step 4: Starting citation analysis...");
    const citationResults = await analyzeCitations(
      businessData,
      websiteResults,
      competitorResults,
      apiCredentials,
    );
    console.log("‚úÖ Citation analysis complete");

    // STEP 5: PageSpeed Analysis
    console.log("‚ö° Step 5: Starting PageSpeed analysis...");
    const pagespeedResults = await analyzePageSpeed(businessData, apiCredentials);
    console.log("‚úÖ PageSpeed analysis complete");

    // STEP 6: Schema Markup Analysis
    console.log("üèóÔ∏è Step 6: Starting schema analysis...");
    const schemaResults = await analyzeSchema(businessData);
    console.log("‚úÖ Schema analysis complete");

    // STEP 7: Review & Reputation Analysis
    console.log("üåü Step 7: Starting review & reputation analysis...");
    const reviewResults = await analyzeReviews(
      businessData,
      competitorResults,
      apiCredentials,
    );
    console.log("‚úÖ Review analysis complete");

    // STEP 8: Final Audit Processing & Report Generation
    console.log("üìã Step 8: Starting comprehensive audit processing...");
    
    // üîß FIX 4: Create combined data structure for processor
    const businessDataWithResults = {
      ...businessData,
      allAnalysisResults: {
        websiteResults,
        competitorResults,
        keywordResults,
        citationResults,
        pagespeedResults,
        schemaResults,
        reviewResults,
      }
    };

    // üîß FIX 5: Call processor as method on class instance (preserves 'this' context)
    const finalAuditResults = await auditProcessor.processAudit(businessDataWithResults);
    console.log("‚úÖ Comprehensive audit processing complete");

    const executionTime = Date.now() - startTime;

    // Enhanced audit results combining all services with final processing
    const auditResults = {
      // Core business information
      businessName: businessData.businessName,
      location: businessData.location,
      website: businessData.website,

      // Final processed results (primary output)
      ...finalAuditResults,

      // Raw service results for detailed analysis
      serviceResults: {
        websiteAnalysis: websiteResults,
        competitorAnalysis: competitorResults,
        keywordAnalysis: keywordResults,
        citationAnalysis: citationResults,
        pagespeedAnalysis: pagespeedResults,
        schemaAnalysis: schemaResults,
        reviewAnalysis: reviewResults,
      },

      // Enhanced audit summary
      auditSummary:
        finalAuditResults.auditSummary ||
        `${businessData.businessName} comprehensive analysis completed successfully!`,

      // Execution metadata
      generatedAt: new Date().toISOString(),
      executionTimeMs: executionTime,

      // Service completion status
      servicesCompleted: {
        websiteAnalysis: websiteResults.success !== false,
        competitorAnalysis: competitorResults.success !== false,
        keywordAnalysis: keywordResults.success !== false,
        citationAnalysis: citationResults.success !== false,
        pagespeedAnalysis: pagespeedResults.success !== false,
        schemaAnalysis: schemaResults.success !== false,
        reviewAnalysis: reviewResults.success !== false,
        finalProcessing: finalAuditResults.success !== false,
      },

      // Enhanced improvement opportunities from all services
      allImprovementOpportunities: [
        ...(websiteResults.improvementOpportunities || []),
        ...(competitorResults.businessData?.improvementOpportunities || []),
        ...(keywordResults.parsedSections?.missingServiceKeywords || []).map(
          (kw) => `Target keyword: "${kw}"`,
        ),
        ...(citationResults.recommendations || []),
        ...(pagespeedResults.recommendations || []),
        ...(schemaResults.recommendations || []),
        ...(reviewResults.recommendations || []),
      ],

      // Combined performance metrics
      performanceMetrics: {
        overallVisibilityScore: finalAuditResults.visibilityScore || 0,
        websitePerformanceScore:
          pagespeedResults.overallSummary?.averageScore || 0,
        localContentScore: websiteResults.localContentScore || 0,
        competitivePosition:
          competitorResults.businessData?.completenessLevel || "Unknown",
        reviewPerformance: {
          businessReviewCount: reviewResults.businessReviewCount || 0,
          businessRating: reviewResults.businessRating || 0,
          competitorComparison: {
            avgCompetitorReviews: reviewResults.avgCompetitorReviewCount || 0,
            avgCompetitorRating: reviewResults.avgCompetitorRating || 0,
          },
        },
        citationConsistency:
          citationResults.consistencyScores?.napConsistency || 0,
        schemaImplementation: schemaResults.score || 0,
      },
    };

    console.log(`üéâ Complete audit finished in ${executionTime}ms`);
    console.log(
      `üìä Final visibility score: ${finalAuditResults.visibilityScore}/100`,
    );
    console.log(`üéØ Performance level: ${finalAuditResults.performanceLevel}`);
    console.log(`‚ö†Ô∏è Issues found: ${finalAuditResults.totalImprovementsCount}`);

    res.json({
      success: true,
      data: auditResults,
    });
  } catch (error) {
    console.error("‚ùå Complete audit processing failed:", error);
    res.status(500).json({
      success: false,
      error: "Complete audit processing failed",
      message: error.message,
      stack: process.env.NODE_ENV === "development" ? error.stack : undefined,
    });
  }
});

// Health check for individual services
app.get("/api/health/services", (req, res) => {
  res.json({
    status: "OK",
    services: {
      websiteAnalysis: "Available",
      competitorAnalysis: "Available",
      keywordAnalysis: "Available",
      citationAnalysis: "Available",
      pagespeedAnalysis: "Available",
      schemaAnalysis: "Available",
      reviewAnalysis: "Available",
      auditProcessor: "Available",
    },
    timestamp: new Date().toISOString(),
  });
});

app.listen(PORT, () => {
  console.log(
    `üöÄ Local Business Audit Tool API running on http://localhost:${PORT}`,
  );
  console.log(`‚úÖ Complete audit pipeline ready with 8 integrated services:`);
  console.log(`   1. üåê Website Content Analysis`);
  console.log(`   2. üèÜ Competitor Analysis & Benchmarking`);
  console.log(`   3. üîç AI-Powered Keyword Analysis`);
  console.log(`   4. üìä Citation & NAP Consistency Analysis`);
  console.log(`   5. ‚ö° PageSpeed Performance Analysis`);
  console.log(`   6. üèóÔ∏è Schema Markup Validation`);
  console.log(`   7. üåü Review & Reputation Analysis`);
  console.log(`   8. üìã Final Audit Processing & Report Generation`);
  console.log(`üîë API Integrations configured:`);
  console.log(`   ‚Ä¢ DataForSEO API (Competitor, Citation, Maps & Review data)`);
  console.log(`   ‚Ä¢ OpenAI API (AI keyword analysis)`);
  console.log(`   ‚Ä¢ Google PageSpeed API (Performance metrics)`);
  console.log(`   ‚Ä¢ Google Sheets API (Results storage) - Optional`);
  console.log(`üéØ Ready to generate comprehensive local business audits!`);
});